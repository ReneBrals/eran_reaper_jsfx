desc: A tool for practicing rhythm. Filters notes which are aligned to a groove.
//author: Eran Talmor (C) 2021
slider1:3<1,16,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Beats
slider2:1<1,16,1{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}>Beat Sub Divisions
slider3:0<-0.5,0.5,0.01>Swing
slider4:50<0,100,1>Precision (Allowed Error)
slider6:0<0,1,1{Off, On}>Auto Adjust
@init
note_on = $x90;

max_hist = 200;
max_age = 60;
hit_rate_max_age = 10; // just measure the last 10 seconds

// Relative time to the beat
function getRelTime(offset) local(p)
(
  p = (beat_position + (offset * (tempo / 60) / srate))/beats;
  p - floor(p);
);

function adjustGrid() local(j)
(
  j=0;
  loop(grid_lines+1,
    v_grid[j] = j/grid_lines + (j&(1+grid_lines)&1 ? swing/grid_lines);
    v_early[j] = max(0, v_grid[j] - precision/200/grid_lines);
    v_late[j] = min(1, v_grid[j] + precision/200/grid_lines);
    j+=1;
  );  
);

function adjustPrecision(hit_rate)
(
  (hit_rate < 0.85) ? precision = min(100, precision + 2);
  (hit_rate > 0.9) ? precision = max(0, precision - 2);
  slider4 = precision;
  adjustGrid();   
);

function isHit(reltime) local(i result)
(
  i=0;
  result = 0;
  while(
     result |= (v_early[i] <= reltime) && (reltime <= v_late[i]);
     i += 1;
     !result && (i <= grid_lines)
  );
  result;
);

@slider
beats = slider1+1;
subdivisions = slider2 + 1;
grid_lines = beats * subdivisions;
swing = slider3;
precision = slider4;
autoadjust = slider6;

v_history_time = 0;
v_history_rel_time = v_history_time + max_hist;
v_history_hits = v_history_rel_time + max_hist;
histidx = 0;

v_early = max_hist*3;
v_late = v_early + grid_lines + 1;
v_grid = v_late + grid_lines + 1;

v_early[0] = 0;
v_grid[0] = 0;
v_grid[grid_lines] = 1;
v_late[grid_lines] = 1;

adjustGrid();

@block


function addToHistory(reltime, hit)
(
     v_history_time[histidx] = time_precise();
     v_history_rel_time[histidx] = reltime;
     v_history_hits[histidx] = hit;
     events_count = events_count * 0.8 + 1;
     hits_count = hits_count * 0.8 + hit;
     hit_rate = hits_count/events_count;
     autoadjust ? (adjustPrecision(hit_rate));
     histidx += 1;
     (histidx >= max_hist) ? (histidx = 0);
);

while (midirecv(offset,msg1,msg2,msg3)) ( // REAPER 4.59+ syntax while()
   noteStatus = msg1 & $xF0;
   channel = msg1 & 0x0F;
   
   play_state && noteStatus==note_on && msg3!=0 ? (
     note_count += 1;
     note = msg2;
     reltime = getRelTime(offset);
     hit = isHit(reltime);
     hit ? (midisend(offset,msg1,note,msg3));
     addToHistory(reltime, hit);
   ) : (
     midisend(offset,msg1,msg2,msg3); // passthrough other events
   )
);

@gfx
function rgb(r,g,b) 
(
  gfx_r = r;
  gfx_g = g;
  gfx_b = b;
);

function verticalDashedLine(x, y1, y2, dash, space) local(i, y)
(
  y = y1;
  loop ((y2-y1)/(dash + space),
    gfx_line(x,y, x, y+dash);
    y += dash+space);
);

xmargin = 20;
header_margin = 40;
footer_margin = 20;

gfx_x = xmargin;
gfx_y = 5;
rgb(1,1,1);
gfx_printf("Hit Rate: %0.f%%\t Precision: %0.f\n\nGrid:", hit_rate*100, precision);

width = gfx_w-xmargin*2;
height = max(150, gfx_h-header_margin - footer_margin);
rgb(0.27, 0.27, 0.27); // grey
gfx_rect(xmargin, header_margin, width, height);

// Draw "grid" area
i=0;
loop(grid_lines+1,
  rgb(0, 0.4, 0);
  low = xmargin+v_early[i]*width;
  grid = xmargin+v_grid[i]*width;
  high = xmargin+v_late[i]*width+1;
  gfx_rect(low, header_margin, high-low, height);
  (i % subdivisions) ? 
    (rgb(0.67, 0.67, 0.67); verticalDashedLine(grid, header_margin, header_margin+height, 1, 10))
  : (rgb(1, 1, 1); gfx_line(grid, header_margin, grid, header_margin + height));
  i+=1;
);
gfx_line(gfx_w-xmargin, header_margin, gfx_w-xmargin, header_margin+height);

play_state ? (  
  // Draw history of notes played
  i=0;
  now = time_precise();
  loop(max_hist,
    birth = v_history_time[i];
    birth != 0 ? (
      hit = v_history_hits[i];
      age = min(max_age, now - birth);
      age_brightness = 0.2 + 1/(0.8*(1+age));
      hit ? rgb(0,age_brightness,0) : rgb(age_brightness,0,0);
      x = width * v_history_rel_time[i];
      y = age*20;
      y < height ? (gfx_circle(xmargin + x, header_margin+y, 8, 1));
      age == max_age ? (v_history_time[i] = 0);
    );
    i += 1;
  );
  
  // Draw vertical line position
  rgb(1,1,0);
  x = xmargin + width * getRelTime();
  gfx_line(x, header_margin, x, header_margin+height);
  
  previousTime = currentTime;
);

