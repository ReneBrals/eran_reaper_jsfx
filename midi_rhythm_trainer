/*******************************************************************************
*  Copyright 2021, Eran Talmor                                                 *
*  This program is free software: you can redistribute it and/or modify        *
*  it under the terms of the GNU General Public License as published by        *
*  the Free Software Foundation, either version 3 of the License, or           *
*  (at your option) any later version.                                         *
*                                                                              *
*  This program is distributed in the hope that it will be useful,             *
*  but WITHOUT ANY WARRANTY; without even the implied warranty of              *
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the                *
*  GNU General Public License (http://www.gnu.org/licenses/)for more details.  *
*******************************************************************************/

desc: A tool for practicing rhythm. Filters notes which are aligned to a groove.
//author: Eran Talmor (C) 2021
slider1:4<1,32,1>Beats
slider2:0<0,1,1,{Manual,Recording}>Rhythm Entry Mode
slider3:0<0,3,1{CH 1/4/9/13,CH 2/6/10/14,CH 3/7/11/15,CH 4/8/12/16}>Select Channel
slider4:8<0,64,1>Channel Divisions
slider5:0<-0.5,0.5,0.01>Channel Swing
slider6:0<0,1,0.01>Channel Phase
slider7:50<1,100,0.1>Error Bound (%)
slider8:1<0,1,1{Off,On}>Auto Shrink Error Bound
slider9:0<0,4,1{Circles,Note Names,Note Numbers>Event Drawing Style

// Hidden sliders per channel
slider20:8<1,64,1>-Divisions1
slider21:0<-0.5,0.5,0.01>-Swing1
slider22:0<0,1,0.01>-Phase1

slider30:0<0,64,1>-Divisions2
slider31:0<-0.5,0.5,0.01>-Swing2
slider32:0<0,1,0.01>-Phase2

slider40:0<0,64,1>-Divisions3
slider41:0<-0.5,0.5,0.01>-Swing3
slider42:0<0,1,0.01>-Phase3

slider50:0<0,64,1>-Divisions4
slider51:0<-0.5,0.5,0.01>-Swing4
slider52:0<0,1,0.01>-Phase4

@init
note_on = $x90;

hist_idx = 0;
max_hist = 200;
max_age = 60;
max_graph = 10*60;
graph_start = 0;
graph_idx = 0;
hit_memory = 0.85;
enable_recording = 1;
max_recorded_divs = 1;

prev_select = -1;

v_history_time = 4; 
v_history_rel_time = v_history_time + max_hist;
v_history_hits = v_history_rel_time + max_hist;
v_history_chan = v_history_hits + max_hist;
v_history_notes = v_history_chan + max_hist;
v_rec_indices = v_history_notes + max_hist;
v_rec = v_rec_indices + 4;
v_graph_hit_rate = v_rec + 4*max_hist;
v_graph_error_bound = v_graph_hit_rate + max_graph;

// Relative time to the beats
function getRelTime(offset) local(p)
(
  p = (beat_position + (offset * (tempo / 60) / srate))/beats;
  p - floor(p);
);

function recordRecording(reltime, chan) local(i)
(
  v_rec[chan*max_hist + v_rec_indices[chan]] = reltime;
  v_rec_indices[chan] += 1;
  max_recorded_divs = max(max_recorded_divs, v_rec_indices[chan]);
);

function getDivs(idx)
( 
  (entry_mode == 1) ? v_rec_indices[idx]
  : idx == 0 ? div0 
  : idx == 1 ? div1 
  : idx == 2 ? div2
  : div3;
);

function getSwing(idx)
( 
  (entry_mode == 1) ? 0
  : idx == 0 ? swing0 
  : idx == 1 ? swing1 
  : idx == 2 ? swing2
  : swing3;
);

function getPhase(idx)
( 
  (entry_mode == 1) ? 0
  : idx == 0 ? phase0 
  : idx == 1 ? phase1 
  : idx == 2 ? phase2
  : phase3;
);

function isRecording()
(
  play_state && enable_recording && (entry_mode == 1) && ((beat_position) < beats)
);

function getGridRaw(chan, divs, i)
(
  (entry_mode == 1) ? v_rec[max_hist*chan + i]
  : (i + (i&1 ? getSwing(chan)) + getPhase(chan))/divs;
);

function getGrid(chan, divs, i)
(
  r = getGridRaw(chan, divs, (i+divs)%divs);
  (i<0) ? r-1 : (i>=divs) ? r+1 : r;
);

function getErrorRange()
(
  (entry_mode == 1) ? error_bound/max_recorded_divs : error_bound/max_divs;
);

function getEarly(chan, divs, i)
(
  max(0, getGrid(chan, divs, i) - getErrorRange()/2);
);

function getLate(chan, divs, i)
(
  min(1, getGrid(chan, divs, i) + getErrorRange()/2);
);

function adjust_error_bound(hit_rate) local(level)
(
  (hit_rate > 0.9) ? 
    (level = (error_bound < 0.2 ? 0.001 : error_bound <= 0.3 ? 0.002 : error_bound <= 0.4 ?  0.005 : 0.01);
    (error_bound = max(0, error_bound - level)));
  slider7 = error_bound*100;
);

// returns: 0 == hit, -1 == early, 1 == late
function isHit(reltime, chan) local(i, hit, min_late, min_early, delta_early, delta_late, divs)
(
  i=0;
  hit = 0;
  min_late = 1;
  min_early = 1;
  divs = getDivs(chan);
  while(
    delta_early = getEarly(chan, divs, i) - reltime;
    delta_late = reltime - getLate(chan, divs, i);
    hit |= (delta_early <= 0) && (delta_late <= 0);
    delta_early > 0 ? (min_early = min(min_early, delta_early));
    delta_late > 0 ? (min_late = min(min_late, delta_late));
    i += 1;
    !hit && (i <= divs)
  );
  hit ? 0 : (min_late > min_early ? -1 : 1); 
);

@slider
beats = slider1;
entry_mode = slider2;

error_bound = slider7/100;
auto_shrink = slider8;
event_style = slider9;

select = slider3;
select != prev_select ?
  ( select == 0 ? (slider4 = slider20; slider5 = slider21; slider6 = slider22)
  : select == 1 ? (slider4 = slider30; slider5 = slider31; slider6 = slider32)
  : select == 2 ? (slider4 = slider40; slider5 = slider41; slider6 = slider42)
  : select == 3 ? (slider4 = slider50; slider5 = slider51; slider6 = slider52))
  
: ( select == 0 ? (slider20 = max(1,slider4); slider21 = slider5; slider22 = slider6)
  : select == 1 ? (slider30 = slider4; slider31 = slider5; slider32 = slider6)
  : select == 2 ? (slider40 = slider4; slider41 = slider5; slider42 = slider6)
  : select == 3 ? (slider50 = slider4; slider51 = slider5; slider52 = slider6));
  
prev_select = select;

div0 = slider20;
swing0 = slider21;
phase0 = slider22;

div1 = slider30;
swing1 = slider31;
phase1 = slider32;

div2 = slider40;
swing2 = slider41;
phase2 = slider42;

div3 = slider50;
swing3 = slider51;
phase3 = slider52;

max_divs = max(div0, max(div1, max(div2, div3)));

@block

function recordHistory(reltime, hit, chan, note)
(
  enable_recording = 0;
  rec_idx = 0;
  v_history_time[hist_idx] = time_precise();
  v_history_rel_time[hist_idx] = reltime;
  v_history_hits[hist_idx] = hit;
  v_history_chan[hist_idx] = chan;
  v_history_notes[hist_idx] = note;
  events_count = events_count * hit_memory + 1;
  hits_count = hits_count * hit_memory + (hit==0);
  hit_rate = hits_count/events_count;
  (auto_shrink) ? (adjust_error_bound(hit_rate));
  hist_idx = (hist_idx + 1) % max_hist;
);

function recordTraining()
(
  t = time();
  (t - graph_start > max_graph) ? (graph_start = t; graph_idx = 0);
  graph_idx = t - graph_start;
  v_graph_hit_rate[graph_idx] = hit_rate;
  v_graph_error_bound[graph_idx] = error_bound;
);

while (midirecv(offset,msg1,msg2,msg3)) ( // REAPER 4.59+ syntax w while()
   noteStatus = msg1 & $xF0;
   channel = msg1 & 0x0F;
   
   play_state && noteStatus==note_on && msg3!=0 ? (
     note_count += 1;
     note = msg2;
     reltime = getRelTime(offset);
     chan = channel % 4;
     hit = isHit(reltime, chan);
     isrec = isRecording();
     (isrec || (hit == 0)) ? (midisend(offset,msg1,note,msg3));
     isrec ? recordRecording(reltime, chan) : recordHistory(reltime, hit, chan, note);
   ) : (
     enable_recording = 1;
     midisend(offset,msg1,msg2,msg3); // passthrough other events
   );
  
   play_state ? recordTraining();
);

@gfx
function rgb(r,g,b) 
(
  gfx_r = r;
  gfx_g = g;
  gfx_b = b;
);

function verticalDashedLine(x, y1, y2, dash, space) local(i, y)
(
  y = y1;
  dash = max(0, dash-1);
  loop ((y2-y1)/(dash + space),
    gfx_line(x,y, x, y+dash);
    y += dash+space);
);

function drawFrame(x,y,w,h)
(
  gfx_x = x;
  gfx_y = y;
  rgb(0.5,0.5,0.5);
  gfx_lineto(x+w,y);
  rgb(1,1,1);
  gfx_lineto(x+w,y+h);
  gfx_lineto(x,y+h);
  rgb(0.5,0.5,0.5);
  gfx_lineto(x,y);
);

function printCenter(x,y,str) local(w,h)
(
  gfx_measurestr(str,w,h);
  gfx_x = x-w/2;
  gfx_y = y;
  gfx_printf(str);
);

function printBottomLeft(x,y,str) local(w,h)
(
  gfx_measurestr(str,w,h);
  gfx_x = x-w;
  gfx_y = y-h;
  gfx_printf(str);
);

function noteName(note) local(names,sharps,nm,sh,str)
(
  names  = "CCDDEFFGGAAB";
  sharps = $x54A;
  nm = str_getchar(names, note%12);
  sh = ((1 << (note%12)) & sharps ? "#" : "");
  sprintf(str,"%c%s\%d", nm, sh, floor(note/12));
  str;
);

function drawEvent(x, y, note, is_hit) local(str)
(
  (event_style == 0) ? (is_hit ? gfx_circle(x, y, 6, 1, 1) : (gfx_circle(x, y, 6, 0,1); gfx_circle(x, y, 5, 0,1)))
: (event_style == 1) ? printCenter(x, y, noteName(note))  
: (event_style == 2) ? (sprintf(str, "%d", note);  printCenter(x, y, str));
);

function DrawGrid(chan, l,t,w,h) local(x,y, hit,now,low,grid,high,i,divs)
(
  rgb(0.27, 0.27, 0.27);
  gfx_rect(l, t, isRecording() ? w * getRelTime() : w, h);

  // Draw "grid" area
  divs = getDivs(chan);
  
  !isRecording() ? (
    // Draw green areas
    rgb(0, 0.4, 0);
    i=-1;
    loop(divs+2,
      low = l+getEarly(chan, divs, i)*w;
      high = l+getLate(chan, divs, i)*w+1;
      gfx_rect(low, t, high-low, h);
      i+=1;
    );
  );
  
  // Draw dashed rhythm lines
  i=0;
  rgb(0.67, 0.67, 0.67);
  loop(divs, 
    grid = l+getGrid(chan, divs, i)*w;
    verticalDashedLine(grid, t, t+h, 1, 5);
    i+=1;
  );
  
  // Draw beat marks
  rgb(0.8, 0.8, 0.8);
  (chan == 0) ? gfx_setfont(1, "Arial", 12);
  i=0;
  loop(beats+1,
    grid = l + i*w/beats;
    gfx_line(grid,t, grid,t+h*0.1);
    gfx_line(grid,t+h*0.9, grid,t+h);
    (chan == 0) ? (
      gfx_x = grid + 3;
      gfx_y = t + 1;
      gfx_printf("%d",i+1);
    );
    i+=1;
  );
  gfx_setfont(0);
  
  play_state ? (
    i=0;
    now = time_precise();
    loop(max_hist,
      birth = v_history_time[i];
      (birth != 0) && (v_history_chan[i] == chan) ? (
        hit = v_history_hits[i];
        age = min(max_age, now - birth);
        age_brightness = 0.2 + 1/(0.8*(1+age));
        (hit == 0) ? rgb(0,age_brightness,0) : 
          (hit == 1) ? rgb(age_brightness,0,0) : rgb(0,0,age_brightness);
        x = w * v_history_rel_time[i];
        y = age*20;
        y < h ? (drawEvent(l+x,t+y, v_history_notes[i], (hit == 0)));
        age == max_age ? (v_history_time[i] = 0);
      );
      i += 1;
    );
    
    // Draw vertical time line 
    rgb(1,1,0);
    x = l + w * getRelTime();
    gfx_line(x, t, x, t+h);
  );  
  
  rgb(1,0,0);
  gfx_setfont(1, "Arial", 48);
  isRecording() ? (printCenter(w/2, h/2, "RECORDING"));
  gfx_setfont(0);  
  drawFrame(l-1, t-1, w+2, h+2);
);

xmargin = 4;
header_margin = 20;
footer_margin = 4;

gfx_x = xmargin;
gfx_y = 1;
rgb(1,1,1);
gfx_setfont(3, "Arial", 15);
gfx_printf("Rhythm Grid:");

width = gfx_w-xmargin*2;
total_grid_height = max(200, (gfx_h - header_margin - footer_margin) * 0.7);
non_zero_divisions = 1 + (getDivs(1) != 0) + (getDivs(2) != 0) + (getDivs(3) !=0);
total_grid_height -= total_grid_height % non_zero_divisions;

grid_margin = 6;
grid_height = total_grid_height / non_zero_divisions;
DrawGrid(0, xmargin, header_margin, width, grid_height-grid_margin);
y = header_margin + grid_height;
getDivs(1) ? (DrawGrid(1, xmargin, y, width, grid_height-grid_margin); y+=grid_height);
getDivs(2) ? (DrawGrid(2, xmargin, y, width, grid_height-grid_margin); y+=grid_height);
getDivs(3) ? (DrawGrid(3, xmargin, y, width, grid_height-grid_margin); y+=grid_height);

// Draw Training graph
//-------------------
graph_top = y + 20;
graph_height = max(80, gfx_h - footer_margin - graph_top);

gfx_x = xmargin;
gfx_y = graph_top-20;
gfx_setfont(3, "Arial", 15);
rgb(1,1,1);
gfx_printf("Training Graph (");
rgb(1,1,0);
gfx_printf("Hit Rate: %0.0f%%", hit_rate*100);
rgb(1,1,1);
gfx_printf(", ");
rgb(0,1,1);
gfx_printf("error_bound: %0.0f%%", error_bound*100);
rgb(1,1,1);
gfx_printf(")");

rgb(0.27, 0.27, 0.4); // greyish purple
gfx_rect(xmargin, graph_top, width, graph_height);

gfx_setfont(3, "Arial", 12);
graph_x_ratio = width/(max_graph-1);
i=0;
rgb(0.67, 0.67, 0.67); 
loop(max_graph/10,
  (i%60 == 0) ?
    (gfx_line(xmargin + i*graph_x_ratio, graph_top, xmargin + i*graph_x_ratio, graph_top+graph_height);
    sprintf(str, "%2d", 1+i/60);
    printBottomLeft(xmargin + (i+60)*graph_x_ratio-1, graph_top + graph_height, str))
  : verticalDashedLine(xmargin + i*graph_x_ratio, graph_top, graph_top+graph_height, 4, 5);
  i += 10;);
gfx_line(xmargin + width, graph_top, xmargin + width, graph_top+graph_height);

// Draw verical time line
rgb(1, 1, 1);
gfx_line(xmargin + graph_idx*graph_x_ratio, graph_top, xmargin + graph_idx*graph_x_ratio, graph_top + graph_height);

// hit rate
i=0;
rgb(1,1,0);
gfx_x = xmargin;
gfx_y = graph_top + graph_height*(1 - v_graph_hit_rate[0]);
loop(max_graph,
  hr = max(0, min(1, 1 - v_graph_hit_rate[i]));
  gfx_lineto(xmargin + i*graph_x_ratio, graph_top + graph_height*hr);
  i+=1);

// error_bound
i=0;
rgb(0,1,1);
gfx_x = xmargin;
gfx_y = graph_top + graph_height*(1 - v_graph_error_bound[0]);
loop(max_graph,
  pr = max(0, min(1, 1 - v_graph_error_bound[i]));
  gfx_lineto(xmargin + i*graph_x_ratio, graph_top + graph_height*pr);
  i+=1);

drawFrame(xmargin-1, graph_top-1, width+2, graph_height+2);
